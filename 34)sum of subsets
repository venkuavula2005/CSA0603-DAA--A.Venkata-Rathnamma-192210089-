#include <stdio.h>

int main() {
    int set[20], subset[20], n, sum, r = 0, total = 0, k = 0, i;
    int s = 0; // This will store the current sum

    // Input number of elements in the set
    printf("Enter number of elements in the set: ");
    scanf("%d", &n);

    // Input the elements of the set
    printf("Enter the elements of the set in increasing order: \n");
    for (i = 0; i < n; i++) {
        scanf("%d", &set[i]);
        r += set[i];  // Calculate the total sum of all elements
    }

    // Input the target sum
    printf("Enter the target sum: ");
    scanf("%d", &sum);

    // Initialize subset array to keep track of included elements
    for (i = 0; i < n; i++) {
        subset[i] = 0;
    }

    printf("The subsets with the sum %d are: \n", sum);

    // Iterative backtracking without functions
    while (1) {
        // Check if current subset's sum equals the target sum
        if (s == sum) {
            printf("Subset found: ");
            for (i = 0; i < k; i++) {
                if (subset[i] == 1) {
                    printf("%d ", set[i]);
                }
            }
            printf("\n");
        }

        // Try including the next element if it does not exceed the sum
        if (k < n && s + set[k] <= sum) {
            subset[k] = 1;
            s += set[k];
            k++;
            r -= set[k-1];
        }
        // If including does not work, try excluding
        else if (k < n && s + r - set[k] >= sum) {
            subset[k] = 0;
            k++;
            r -= set[k-1];
        }
        // If we cannot include or exclude, backtrack
        else {
            do {
                k--;
                if (k < 0) return 0;  // Exit when all subsets are explored
                r += set[k];
            } while (subset[k] == 0 && k > 0);

            subset[k] = 0;
            s -= set[k];
            k++;
        }
    }

    return 0;
}
