#include <stdio.h>

#define MAX 20

int graph[MAX][MAX], colors[MAX], n, m; // n = number of vertices, m = number of colors

int main() {
    int v = 0, c = 1, flag = 0, i, j; 

    // Input the number of vertices
    printf("Enter number of vertices: ");
    scanf("%d", &n);

    // Input the adjacency matrix
    printf("Enter the adjacency matrix (0 or 1):\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);

    // Input the number of colors
    printf("Enter number of colors: ");
    scanf("%d", &m);

    // Initialize all vertices as uncolored
    for (i = 0; i < n; i++) colors[i] = 0;

    // Iterative backtracking to color the graph without functions
    while (1) {
        flag = 0; // Reset flag for each vertex
        // Check if the color c can be assigned to vertex v
        for (i = 0; i < n; i++) {
            if (graph[v][i] && colors[i] == c) { // If adjacent vertex has the same color, it's not safe
                flag = 1; // Not safe to assign color c to vertex v
                break;
            }
        }

        // If safe, assign the color
        if (!flag) {
            colors[v] = c;
            v++; // Move to the next vertex

            // If all vertices are colored, solution is found
            if (v == n) {
                printf("Solution exists: Following are the assigned colors\n");
                for (i = 0; i < n; i++)
                    printf("Vertex %d --> Color %d\n", i, colors[i]);
                return 0; // Exit after finding the solution
            }

            c = 1; // Start with the first color for the next vertex
        } else {
            // If it's not safe to assign color c, try the next color
            c++;
        }

        // If no valid color found for the current vertex, backtrack
        if (c > m) {
            v--; // Backtrack to the previous vertex

            // If no solution exists after backtracking all vertices
            if (v < 0) {
                printf("No solution exists.\n");
                return 0;
            }

            c = colors[v] + 1; // Try the next color for the previous vertex
            colors[v] = 0;     // Reset the color of the previous vertex
        }
    }
}
